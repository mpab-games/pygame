#!/usr/bin/env sh

(exit 0) && $(return >/dev/null 2>&1) && : || {
  echo "$0: must be sourced"
  exit
}

echo $CMD_EXIT

distro_name=$(eval "(lsb_release -ds || cat /etc/*release || uname -om) 2>/dev/null" | head -n1 | sed -e 's/PRETTY_NAME=//' -e 's/NAME=//' -e 's/"//g' -e 's/ /-/g' -e 's/\//-/g')

export PYTHON_ENVIRONMENT="venv-$distro_name"

python_command() {
  if ! [ -d ./$PYTHON_ENVIRONMENT ]; then
    echo creating environment: $PYTHON_ENVIRONMENT using $PYTHON_CMD -m venv ./$PYTHON_ENVIRONMENT
    $PYTHON_CMD -m venv ./$PYTHON_ENVIRONMENT
  fi

  if [ -d ./$PYTHON_ENVIRONMENT ]; then
    echo found environment: $PYTHON_ENVIRONMENT
  fi

  # windows (msys, git-bash)
  if [ -e ./$PYTHON_ENVIRONMENT/Scripts/activate ]; then
    echo activating environment: ./$PYTHON_ENVIRONMENT/Scripts/activate
    . ./$PYTHON_ENVIRONMENT/Scripts/activate
    python -m pip install --upgrade pip

    if [ -e requirements.txt ]; then
      echo installing packages using requirements.txt
      pip install -r requirements.txt
    fi
  fi

  # Linux, MacOS, ...
  if [ -e ./$PYTHON_ENVIRONMENT/bin/activate ]; then
    echo activating environment: ./$PYTHON_ENVIRONMENT/bin/activate
    . ./$PYTHON_ENVIRONMENT/bin/activate
    python -m pip install --upgrade pip

    if [ -e requirements.txt ]; then
      echo installing packages using requirements.txt
      pip install -r requirements.txt
    fi
  fi
}

export PYTHON_CMD=

if [ $(command -v py) ]; then
  export PYTHON_CMD=py
  python_command
  return
fi

if [ $(command -v python) ]; then
  export PYTHON_CMD=python
  python_command
  return
fi

if [ $(command -v python3) ]; then
  export PYTHON_CMD=python3
  python_command
  return
fi

if [ $(command -v python2) ]; then
  export PYTHON_CMD=python2
  python_command
  return
fi

echo 'python not found - cannot set environment'
